inherit(lib::test);

Foo: class{
	+ _pub: 100;
	# _pro: 200;
	- _pri: 300;
		
	hoge: 555;
	
	foo: fun hoge;
}

Bar: class(Foo){

	bar: method{
		return this.pro;
	}
	
	- hoge: 1111;
}

Singleton: singleton{
	bar : fun(){
		return "aaa";
	}
	
	op_call: method{
		return 156;
	}
}

TestFoo: class{
	_obj;
	
	setup#Before: method{
		_obj = Foo();
	}
	
	eq#Test: method{
		assert _obj.pub==100;
		assert _obj.pub()==100;
	}
	
	add#Test: method{
		_obj.pub = 10;
		_obj.pub += 10;
		assert _obj.pub==20;
	}
	
	pro#Test: method{
		assert _obj.pro && false catch(e) true; 
		assert _obj.class::pro && false catch(e) true; 
	}
	
	pri#Test: method{
		assert _obj.pri && false catch(e) true; 
		assert _obj.class::pri && false catch(e) true; 
	}
}

TestBar: class{
	_obj;
	
	setup#Before: method{
		_obj = Bar();
	}
	
	def#Test: method{
		Bar::pub: method 200;
		assert _obj.pub==200;
	}

	bar#Test: method{
		assert _obj.bar==200;
	}
	
	def2#Test: method{
		Bar::pro: method 200;
		assert _obj.pro==200;
	}
	
	check#Test: method{
		assert Foo::hoge==555;
		assert Bar::foo()==555;
	}
	
	boo#Test{
		class Poo{
			test: 10;
			test2: 10 + 10;
		}
		
		assert Poo::test==10;
		assert Poo::test2==20;
	}
}

TestSingleton: class{
	tests#Test: method{
		assert Singleton.class===Singleton;
		assert Singleton::bar()=="aaa";
		assert Singleton.bar=="aaa";
	}
	
	call#Test: method{
		assert Singleton()==156;
	}
}

class TestEq{
	testeq#Test{
		class Foo {
				op_eq(a){
						return true;
				}
		};

		a: Foo();
		b: Foo();
		//assert (a == b);
		//assert !(a != b); 
	}
}

class Big{
	a0: 0;
	a1: 1;
	a2: 2;
	a3: 3;
	a4: 4;
	a5: 5;
	a6: 6;
	a7: 7;
	a8: 8;
	a9: 9;
	a10: 10;
	a11: 11;
	a12: 12;
	a13: 13;
	a14: 14;
	a15: 15;
	a16: 16;
	a17: 17;
	a18: 18;
	a19: 19;
	a20: 20;
	a21: 21;
	a22: 22;
	a23: 23;
	a24: 24;
	a25: 25;
	a26: 26;
	a27: 27;
	a28: 28;
	a29: 29;
	a30: 30;
	a31: 31;
	a32: 32;
	a33: 33;
	a34: 34;
	a35: 35;
	a36: 36;
	a37: 37;
	a38: 38;
	a39: 39;
	a40: 40;
	a41: 41;
	a42: 42;
	a43: 43;
	a44: 44;
	a45: 45;
	a46: 46;
	a47: 47;
	a48: 48;
	a49: 49;
	a50: 50;
	a51: 51;
	a52: 52;
	a53: 53;
	a54: 54;
	a55: 55;
	a56: 56;
	a57: 57;
	a58: 58;
	a59: 59;
	a60: 60;
	a61: 61;
	a62: 62;
	a63: 63;
	a64: 64;
	a65: 65;
	a66: 66;
	a67: 67;
	a68: 68;
	a69: 69;
	a70: 70;
	a71: 71;
	a72: 72;
	a73: 73;
	a74: 74;
	a75: 75;
	a76: 76;
	a77: 77;
	a78: 78;
	a79: 79;
	a80: 80;
	a81: 81;
	a82: 82;
	a83: 83;
	a84: 84;
	a85: 85;
	a86: 86;
	a87: 87;
	a88: 88;
	a89: 89;
	a90: 90;
	a91: 91;
	a92: 92;
	a93: 93;
	a94: 94;
	a95: 95;
	a96: 96;
	a97: 97;
	a98: 98;
	a99: 99;
	a100: 100;
	a101: 101;
	a102: 102;
	a103: 103;
	a104: 104;
	a105: 105;
	a106: 106;
	a107: 107;
	a108: 108;
	a109: 109;
	a110: 110;
	a111: 111;
	a112: 112;
	a113: 113;
	a114: 114;
	a115: 115;
	a116: 116;
	a117: 117;
	a118: 118;
	a119: 119;
	a120: 120;
	a121: 121;
	a122: 122;
	a123: 123;
	a124: 124;
	a125: 125;
	a126: 126;
	a127: 127;
	a128: 128;
	a129: 129;
	a130: 130;
	a131: 131;
	a132: 132;
	a133: 133;
	a134: 134;
	a135: 135;
	a136: 136;
	a137: 137;
	a138: 138;
	a139: 139;
	a140: 140;
	a141: 141;
	a142: 142;
	a143: 143;
	a144: 144;
	a145: 145;
	a146: 146;
	a147: 147;
	a148: 148;
	a149: 149;
	a150: 150;
	a151: 151;
	a152: 152;
	a153: 153;
	a154: 154;
	a155: 155;
	a156: 156;
	a157: 157;
	a158: 158;
	a159: 159;
	a160: 160;
	a161: 161;
	a162: 162;
	a163: 163;
	a164: 164;
	a165: 165;
	a166: 166;
	a167: 167;
	a168: 168;
	a169: 169;
	a170: 170;
	a171: 171;
	a172: 172;
	a173: 173;
	a174: 174;
	a175: 175;
	a176: 176;
	a177: 177;
	a178: 178;
	a179: 179;
	a180: 180;
	a181: 181;
	a182: 182;
	a183: 183;
	a184: 184;
	a185: 185;
	a186: 186;
	a187: 187;
	a188: 188;
	a189: 189;
	a190: 190;
	a191: 191;
	a192: 192;
	a193: 193;
	a194: 194;
	a195: 195;
	a196: 196;
	a197: 197;
	a198: 198;
	a199: 199;
	a200: 200;
	a201: 201;
	a202: 202;
	a203: 203;
	a204: 204;
	a205: 205;
	a206: 206;
	a207: 207;
	a208: 208;
	a209: 209;
	a210: 210;
	a211: 211;
	a212: 212;
	a213: 213;
	a214: 214;
	a215: 215;
	a216: 216;
	a217: 217;
	a218: 218;
	a219: 219;
	a220: 220;
	a221: 221;
	a222: 222;
	a223: 223;
	a224: 224;
	a225: 225;
	a226: 226;
	a227: 227;
	a228: 228;
	a229: 229;
	a230: 230;
	a231: 231;
	a232: 232;
	a233: 233;
	a234: 234;
	a235: 235;
	a236: 236;
	a237: 237;
	a238: 238;
	a239: 239;
	a240: 240;
	a241: 241;
	a242: 242;
	a243: 243;
	a244: 244;
	a245: 245;
	a246: 246;
	a247: 247;
	a248: 248;
	a249: 249;
	a250: 250;
	a251: 251;
	a252: 252;
	a253: 253;
	a254: 254;
	a255: 255;
	a256: 256;
	
	ref#Test{
		assert a0==0;
		assert a1==1;
		assert a2==2;
		assert a3==3;
		assert a4==4;
		assert a5==5;
		assert a6==6;
		assert a7==7;
		assert a8==8;
		assert a9==9;
		assert a10==10;
		assert a11==11;
		assert a12==12;
		assert a13==13;
		assert a14==14;
		assert a15==15;
		assert a16==16;
		assert a17==17;
		assert a18==18;
		assert a19==19;
		assert a20==20;
		assert a21==21;
		assert a22==22;
		assert a23==23;
		assert a24==24;
		assert a25==25;
		assert a26==26;
		assert a27==27;
		assert a28==28;
		assert a29==29;
		assert a30==30;
		assert a31==31;
		assert a32==32;
		assert a33==33;
		assert a34==34;
		assert a35==35;
		assert a36==36;
		assert a37==37;
		assert a38==38;
		assert a39==39;
		assert a40==40;
		assert a41==41;
		assert a42==42;
		assert a43==43;
		assert a44==44;
		assert a45==45;
		assert a46==46;
		assert a47==47;
		assert a48==48;
		assert a49==49;
		assert a50==50;
		assert a51==51;
		assert a52==52;
		assert a53==53;
		assert a54==54;
		assert a55==55;
		assert a56==56;
		assert a57==57;
		assert a58==58;
		assert a59==59;
		assert a60==60;
		assert a61==61;
		assert a62==62;
		assert a63==63;
		assert a64==64;
		assert a65==65;
		assert a66==66;
		assert a67==67;
		assert a68==68;
		assert a69==69;
		assert a70==70;
		assert a71==71;
		assert a72==72;
		assert a73==73;
		assert a74==74;
		assert a75==75;
		assert a76==76;
		assert a77==77;
		assert a78==78;
		assert a79==79;
		assert a80==80;
		assert a81==81;
		assert a82==82;
		assert a83==83;
		assert a84==84;
		assert a85==85;
		assert a86==86;
		assert a87==87;
		assert a88==88;
		assert a89==89;
		assert a90==90;
		assert a91==91;
		assert a92==92;
		assert a93==93;
		assert a94==94;
		assert a95==95;
		assert a96==96;
		assert a97==97;
		assert a98==98;
		assert a99==99;
		assert a100==100;
		assert a101==101;
		assert a102==102;
		assert a103==103;
		assert a104==104;
		assert a105==105;
		assert a106==106;
		assert a107==107;
		assert a108==108;
		assert a109==109;
		assert a110==110;
		assert a111==111;
		assert a112==112;
		assert a113==113;
		assert a114==114;
		assert a115==115;
		assert a116==116;
		assert a117==117;
		assert a118==118;
		assert a119==119;
		assert a120==120;
		assert a121==121;
		assert a122==122;
		assert a123==123;
		assert a124==124;
		assert a125==125;
		assert a126==126;
		assert a127==127;
		assert a128==128;
		assert a129==129;
		assert a130==130;
		assert a131==131;
		assert a132==132;
		assert a133==133;
		assert a134==134;
		assert a135==135;
		assert a136==136;
		assert a137==137;
		assert a138==138;
		assert a139==139;
		assert a140==140;
		assert a141==141;
		assert a142==142;
		assert a143==143;
		assert a144==144;
		assert a145==145;
		assert a146==146;
		assert a147==147;
		assert a148==148;
		assert a149==149;
		assert a150==150;
		assert a151==151;
		assert a152==152;
		assert a153==153;
		assert a154==154;
		assert a155==155;
		assert a156==156;
		assert a157==157;
		assert a158==158;
		assert a159==159;
		assert a160==160;
		assert a161==161;
		assert a162==162;
		assert a163==163;
		assert a164==164;
		assert a165==165;
		assert a166==166;
		assert a167==167;
		assert a168==168;
		assert a169==169;
		assert a170==170;
		assert a171==171;
		assert a172==172;
		assert a173==173;
		assert a174==174;
		assert a175==175;
		assert a176==176;
		assert a177==177;
		assert a178==178;
		assert a179==179;
		assert a180==180;
		assert a181==181;
		assert a182==182;
		assert a183==183;
		assert a184==184;
		assert a185==185;
		assert a186==186;
		assert a187==187;
		assert a188==188;
		assert a189==189;
		assert a190==190;
		assert a191==191;
		assert a192==192;
		assert a193==193;
		assert a194==194;
		assert a195==195;
		assert a196==196;
		assert a197==197;
		assert a198==198;
		assert a199==199;
		assert a200==200;
		assert a201==201;
		assert a202==202;
		assert a203==203;
		assert a204==204;
		assert a205==205;
		assert a206==206;
		assert a207==207;
		assert a208==208;
		assert a209==209;
		assert a210==210;
		assert a211==211;
		assert a212==212;
		assert a213==213;
		assert a214==214;
		assert a215==215;
		assert a216==216;
		assert a217==217;
		assert a218==218;
		assert a219==219;
		assert a220==220;
		assert a221==221;
		assert a222==222;
		assert a223==223;
		assert a224==224;
		assert a225==225;
		assert a226==226;
		assert a227==227;
		assert a228==228;
		assert a229==229;
		assert a230==230;
		assert a231==231;
		assert a232==232;
		assert a233==233;
		assert a234==234;
		assert a235==235;
		assert a236==236;
		assert a237==237;
		assert a238==238;
		assert a239==239;
		assert a240==240;
		assert a241==241;
		assert a242==242;
		assert a243==243;
		assert a244==244;
		assert a245==245;
		assert a246==246;
		assert a247==247;
		assert a248==248;
		assert a249==249;
		assert a250==250;
		assert a251==251;
		assert a252==252;
		assert a253==253;
		assert a254==254;
		assert a255==255;
		assert a256==256;
	}
	
	refall#Test{
		257.times{
			assert this.class::("a" ~ it.to_s)==it;
		}
	}
}

class Vec2D{
  + _x;
  + _y;

  initialize: method(_x, _y){}

  op_add_assign: method(v){
    _x += v.x;
    _y += v.y;
    return this;
  }
  
  to_s: method(){
    return %f(Vec2D(x: %g, y: %g))(_x, _y);
  }
}
